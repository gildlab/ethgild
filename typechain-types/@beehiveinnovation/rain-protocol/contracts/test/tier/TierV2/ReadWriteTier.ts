/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../../../../common";

export interface ReadWriteTierInterface extends utils.Interface {
  functions: {
    "report(address,uint256[])": FunctionFragment;
    "reportTimeForTier(address,uint256,uint256[])": FunctionFragment;
    "reportTimeForTier(uint256,uint256)": FunctionFragment;
    "setTier(address,uint256)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "tierAtTimeFromReport(uint256,uint256)": FunctionFragment;
    "truncateTiersAbove(uint256,uint256)": FunctionFragment;
    "updateReportWithTierAtTime(uint256,uint256,uint256,uint256)": FunctionFragment;
    "updateTimeAtTier(uint256,uint256,uint256)": FunctionFragment;
    "updateTimesForTierRange(uint256,uint256,uint256,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "report"
      | "reportTimeForTier(address,uint256,uint256[])"
      | "reportTimeForTier(uint256,uint256)"
      | "setTier"
      | "supportsInterface"
      | "tierAtTimeFromReport"
      | "truncateTiersAbove"
      | "updateReportWithTierAtTime"
      | "updateTimeAtTier"
      | "updateTimesForTierRange"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "report",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "reportTimeForTier(address,uint256,uint256[])",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "reportTimeForTier(uint256,uint256)",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setTier",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "tierAtTimeFromReport",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "truncateTiersAbove",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateReportWithTierAtTime",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "updateTimeAtTier",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "updateTimesForTierRange",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;

  decodeFunctionResult(functionFragment: "report", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "reportTimeForTier(address,uint256,uint256[])",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "reportTimeForTier(uint256,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setTier", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tierAtTimeFromReport",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "truncateTiersAbove",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateReportWithTierAtTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateTimeAtTier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateTimesForTierRange",
    data: BytesLike
  ): Result;

  events: {
    "Initialized(uint8)": EventFragment;
    "TierChange(address,address,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TierChange"): EventFragment;
}

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface TierChangeEventObject {
  sender: string;
  account: string;
  startTier: BigNumber;
  endTier: BigNumber;
}
export type TierChangeEvent = TypedEvent<
  [string, string, BigNumber, BigNumber],
  TierChangeEventObject
>;

export type TierChangeEventFilter = TypedEventFilter<TierChangeEvent>;

export interface ReadWriteTier extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ReadWriteTierInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    report(
      account_: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "reportTimeForTier(address,uint256,uint256[])"(
      account_: PromiseOrValue<string>,
      tier_: PromiseOrValue<BigNumberish>,
      arg2: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "reportTimeForTier(uint256,uint256)"(
      report_: PromiseOrValue<BigNumberish>,
      tier_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { timestamp_: BigNumber }>;

    setTier(
      account_: PromiseOrValue<string>,
      endTier_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId_: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    tierAtTimeFromReport(
      report_: PromiseOrValue<BigNumberish>,
      timestamp_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { tier_: BigNumber }>;

    truncateTiersAbove(
      report_: PromiseOrValue<BigNumberish>,
      tier_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    updateReportWithTierAtTime(
      report_: PromiseOrValue<BigNumberish>,
      startTier_: PromiseOrValue<BigNumberish>,
      endTier_: PromiseOrValue<BigNumberish>,
      timestamp_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { updatedReport_: BigNumber }>;

    updateTimeAtTier(
      report_: PromiseOrValue<BigNumberish>,
      tier_: PromiseOrValue<BigNumberish>,
      timestamp_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { updatedReport_: BigNumber }>;

    updateTimesForTierRange(
      report_: PromiseOrValue<BigNumberish>,
      startTier_: PromiseOrValue<BigNumberish>,
      endTier_: PromiseOrValue<BigNumberish>,
      timestamp_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { updatedReport_: BigNumber }>;
  };

  report(
    account_: PromiseOrValue<string>,
    arg1: PromiseOrValue<BigNumberish>[],
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "reportTimeForTier(address,uint256,uint256[])"(
    account_: PromiseOrValue<string>,
    tier_: PromiseOrValue<BigNumberish>,
    arg2: PromiseOrValue<BigNumberish>[],
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "reportTimeForTier(uint256,uint256)"(
    report_: PromiseOrValue<BigNumberish>,
    tier_: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  setTier(
    account_: PromiseOrValue<string>,
    endTier_: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId_: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  tierAtTimeFromReport(
    report_: PromiseOrValue<BigNumberish>,
    timestamp_: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  truncateTiersAbove(
    report_: PromiseOrValue<BigNumberish>,
    tier_: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  updateReportWithTierAtTime(
    report_: PromiseOrValue<BigNumberish>,
    startTier_: PromiseOrValue<BigNumberish>,
    endTier_: PromiseOrValue<BigNumberish>,
    timestamp_: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  updateTimeAtTier(
    report_: PromiseOrValue<BigNumberish>,
    tier_: PromiseOrValue<BigNumberish>,
    timestamp_: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  updateTimesForTierRange(
    report_: PromiseOrValue<BigNumberish>,
    startTier_: PromiseOrValue<BigNumberish>,
    endTier_: PromiseOrValue<BigNumberish>,
    timestamp_: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    report(
      account_: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "reportTimeForTier(address,uint256,uint256[])"(
      account_: PromiseOrValue<string>,
      tier_: PromiseOrValue<BigNumberish>,
      arg2: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "reportTimeForTier(uint256,uint256)"(
      report_: PromiseOrValue<BigNumberish>,
      tier_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setTier(
      account_: PromiseOrValue<string>,
      endTier_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    supportsInterface(
      interfaceId_: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    tierAtTimeFromReport(
      report_: PromiseOrValue<BigNumberish>,
      timestamp_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    truncateTiersAbove(
      report_: PromiseOrValue<BigNumberish>,
      tier_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    updateReportWithTierAtTime(
      report_: PromiseOrValue<BigNumberish>,
      startTier_: PromiseOrValue<BigNumberish>,
      endTier_: PromiseOrValue<BigNumberish>,
      timestamp_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    updateTimeAtTier(
      report_: PromiseOrValue<BigNumberish>,
      tier_: PromiseOrValue<BigNumberish>,
      timestamp_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    updateTimesForTierRange(
      report_: PromiseOrValue<BigNumberish>,
      startTier_: PromiseOrValue<BigNumberish>,
      endTier_: PromiseOrValue<BigNumberish>,
      timestamp_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "TierChange(address,address,uint256,uint256)"(
      sender?: null,
      account?: null,
      startTier?: null,
      endTier?: null
    ): TierChangeEventFilter;
    TierChange(
      sender?: null,
      account?: null,
      startTier?: null,
      endTier?: null
    ): TierChangeEventFilter;
  };

  estimateGas: {
    report(
      account_: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "reportTimeForTier(address,uint256,uint256[])"(
      account_: PromiseOrValue<string>,
      tier_: PromiseOrValue<BigNumberish>,
      arg2: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "reportTimeForTier(uint256,uint256)"(
      report_: PromiseOrValue<BigNumberish>,
      tier_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setTier(
      account_: PromiseOrValue<string>,
      endTier_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId_: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tierAtTimeFromReport(
      report_: PromiseOrValue<BigNumberish>,
      timestamp_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    truncateTiersAbove(
      report_: PromiseOrValue<BigNumberish>,
      tier_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    updateReportWithTierAtTime(
      report_: PromiseOrValue<BigNumberish>,
      startTier_: PromiseOrValue<BigNumberish>,
      endTier_: PromiseOrValue<BigNumberish>,
      timestamp_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    updateTimeAtTier(
      report_: PromiseOrValue<BigNumberish>,
      tier_: PromiseOrValue<BigNumberish>,
      timestamp_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    updateTimesForTierRange(
      report_: PromiseOrValue<BigNumberish>,
      startTier_: PromiseOrValue<BigNumberish>,
      endTier_: PromiseOrValue<BigNumberish>,
      timestamp_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    report(
      account_: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "reportTimeForTier(address,uint256,uint256[])"(
      account_: PromiseOrValue<string>,
      tier_: PromiseOrValue<BigNumberish>,
      arg2: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "reportTimeForTier(uint256,uint256)"(
      report_: PromiseOrValue<BigNumberish>,
      tier_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setTier(
      account_: PromiseOrValue<string>,
      endTier_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId_: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tierAtTimeFromReport(
      report_: PromiseOrValue<BigNumberish>,
      timestamp_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    truncateTiersAbove(
      report_: PromiseOrValue<BigNumberish>,
      tier_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    updateReportWithTierAtTime(
      report_: PromiseOrValue<BigNumberish>,
      startTier_: PromiseOrValue<BigNumberish>,
      endTier_: PromiseOrValue<BigNumberish>,
      timestamp_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    updateTimeAtTier(
      report_: PromiseOrValue<BigNumberish>,
      tier_: PromiseOrValue<BigNumberish>,
      timestamp_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    updateTimesForTierRange(
      report_: PromiseOrValue<BigNumberish>,
      startTier_: PromiseOrValue<BigNumberish>,
      endTier_: PromiseOrValue<BigNumberish>,
      timestamp_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
