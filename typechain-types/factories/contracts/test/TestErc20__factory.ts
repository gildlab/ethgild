/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  TestErc20,
  TestErc20Interface,
} from "../../../contracts/test/TestErc20";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Approval",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint8",
        name: "version",
        type: "uint8",
      },
    ],
    name: "Initialized",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Transfer",
    type: "event",
  },
  {
    inputs: [],
    name: "DECIMALS",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "TOTAL_SUPPLY",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
    ],
    name: "allowance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "approve",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "decimals",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "subtractedValue",
        type: "uint256",
      },
    ],
    name: "decreaseAllowance",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "addedValue",
        type: "uint256",
      },
    ],
    name: "increaseAllowance",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "symbol",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transfer",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transferFrom",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60806040523480156200001157600080fd5b50600054610100900460ff1615808015620000335750600054600160ff909116105b806200006357506200005030620001b660201b6200044f1760201c565b15801562000063575060005460ff166001145b620000cc5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084015b60405180910390fd5b6000805460ff191660011790558015620000f0576000805461ff0019166101001790555b620001426040518060400160405280600b81526020016a55534420436c617373696360a81b81525060405180604001604052806005815260200164555344434360d81b815250620001c560201b60201c565b620001683362000155600660096200038a565b6200016290600a620004a3565b62000231565b8015620001af576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5062000628565b6001600160a01b03163b151590565b600054610100900460ff16620002215760405162461bcd60e51b815260206004820152602b6024820152600080516020620012ea83398151915260448201526a6e697469616c697a696e6760a81b6064820152608401620000c3565b6200022d8282620002f6565b5050565b6001600160a01b038216620002895760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f2061646472657373006044820152606401620000c3565b80603560008282546200029d91906200038a565b90915550506001600160a01b0382166000818152603360209081526040808320805486019055518481527fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a35050565b600054610100900460ff16620003525760405162461bcd60e51b815260206004820152602b6024820152600080516020620012ea83398151915260448201526a6e697469616c697a696e6760a81b6064820152608401620000c3565b60366200036083826200055c565b5060376200036f82826200055c565b505050565b634e487b7160e01b600052601160045260246000fd5b80820180821115620003a057620003a062000374565b92915050565b600181815b80851115620003e7578160001904821115620003cb57620003cb62000374565b80851615620003d957918102915b93841c9390800290620003ab565b509250929050565b6000826200040057506001620003a0565b816200040f57506000620003a0565b8160018114620004285760028114620004335762000453565b6001915050620003a0565b60ff84111562000447576200044762000374565b50506001821b620003a0565b5060208310610133831016604e8410600b841016171562000478575081810a620003a0565b620004848383620003a6565b80600019048211156200049b576200049b62000374565b029392505050565b6000620004b18383620003ef565b9392505050565b634e487b7160e01b600052604160045260246000fd5b600181811c90821680620004e357607f821691505b6020821081036200050457634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156200036f57600081815260208120601f850160051c81016020861015620005335750805b601f850160051c820191505b8181101562000554578281556001016200053f565b505050505050565b81516001600160401b03811115620005785762000578620004b8565b6200059081620005898454620004ce565b846200050a565b602080601f831160018114620005c85760008415620005af5750858301515b600019600386901b1c1916600185901b17855562000554565b600085815260208120601f198616915b82811015620005f957888601518255948401946001909101908401620005d8565b5085821015620006185787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b610cb280620006386000396000f3fe608060405234801561001057600080fd5b50600436106100df5760003560e01c8063395093511161008c57806395d89b411161006657806395d89b41146101b2578063a457c2d7146101ba578063a9059cbb146101cd578063dd62ed3e146101e057600080fd5b8063395093511461016157806370a0823114610174578063902d55a5146101aa57600080fd5b806323b872dd116100bd57806323b872dd146101375780632e0f26251461014a578063313ce5671461015257600080fd5b806306fdde03146100e4578063095ea7b31461010257806318160ddd14610125575b600080fd5b6100ec610226565b6040516100f9919061096b565b60405180910390f35b610115610110366004610a00565b6102b8565b60405190151581526020016100f9565b6035545b6040519081526020016100f9565b610115610145366004610a2a565b6102d2565b610129600681565b604051601281526020016100f9565b61011561016f366004610a00565b6102f6565b610129610182366004610a66565b73ffffffffffffffffffffffffffffffffffffffff1660009081526033602052604090205490565b610129610342565b6100ec61035c565b6101156101c8366004610a00565b61036b565b6101156101db366004610a00565b610441565b6101296101ee366004610a88565b73ffffffffffffffffffffffffffffffffffffffff918216600090815260346020908152604080832093909416825291909152205490565b60606036805461023590610abb565b80601f016020809104026020016040519081016040528092919081815260200182805461026190610abb565b80156102ae5780601f10610283576101008083540402835291602001916102ae565b820191906000526020600020905b81548152906001019060200180831161029157829003601f168201915b5050505050905090565b6000336102c681858561046b565b60019150505b92915050565b6000336102e085828561061e565b6102eb8585856106f5565b506001949350505050565b33600081815260346020908152604080832073ffffffffffffffffffffffffffffffffffffffff871684529091528120549091906102c6908290869061033d908790610b3d565b61046b565b61034e60066009610b3d565b61035990600a610c70565b81565b60606037805461023590610abb565b33600081815260346020908152604080832073ffffffffffffffffffffffffffffffffffffffff8716845290915281205490919083811015610434576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760448201527f207a65726f00000000000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b6102eb828686840361046b565b6000336102c68185856106f5565b73ffffffffffffffffffffffffffffffffffffffff163b151590565b73ffffffffffffffffffffffffffffffffffffffff831661050d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460448201527f7265737300000000000000000000000000000000000000000000000000000000606482015260840161042b565b73ffffffffffffffffffffffffffffffffffffffff82166105b0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f20616464726560448201527f7373000000000000000000000000000000000000000000000000000000000000606482015260840161042b565b73ffffffffffffffffffffffffffffffffffffffff83811660008181526034602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b73ffffffffffffffffffffffffffffffffffffffff8381166000908152603460209081526040808320938616835292905220547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81146106ef57818110156106e2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e6365000000604482015260640161042b565b6106ef848484840361046b565b50505050565b73ffffffffffffffffffffffffffffffffffffffff8316610798576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f20616460448201527f6472657373000000000000000000000000000000000000000000000000000000606482015260840161042b565b73ffffffffffffffffffffffffffffffffffffffff821661083b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201527f6573730000000000000000000000000000000000000000000000000000000000606482015260840161042b565b73ffffffffffffffffffffffffffffffffffffffff8316600090815260336020526040902054818110156108f1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e742065786365656473206260448201527f616c616e63650000000000000000000000000000000000000000000000000000606482015260840161042b565b73ffffffffffffffffffffffffffffffffffffffff80851660008181526033602052604080822086860390559286168082529083902080548601905591517fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9061095e9086815260200190565b60405180910390a36106ef565b600060208083528351808285015260005b818110156109985785810183015185820160400152820161097c565b5060006040828601015260407fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f8301168501019250505092915050565b803573ffffffffffffffffffffffffffffffffffffffff811681146109fb57600080fd5b919050565b60008060408385031215610a1357600080fd5b610a1c836109d7565b946020939093013593505050565b600080600060608486031215610a3f57600080fd5b610a48846109d7565b9250610a56602085016109d7565b9150604084013590509250925092565b600060208284031215610a7857600080fd5b610a81826109d7565b9392505050565b60008060408385031215610a9b57600080fd5b610aa4836109d7565b9150610ab2602084016109d7565b90509250929050565b600181811c90821680610acf57607f821691505b602082108103610b08577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b808201808211156102cc576102cc610b0e565b600181815b80851115610ba957817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04821115610b8f57610b8f610b0e565b80851615610b9c57918102915b93841c9390800290610b55565b509250929050565b600082610bc0575060016102cc565b81610bcd575060006102cc565b8160018114610be35760028114610bed57610c09565b60019150506102cc565b60ff841115610bfe57610bfe610b0e565b50506001821b6102cc565b5060208310610133831016604e8410600b8410161715610c2c575081810a6102cc565b610c368383610b50565b807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04821115610c6857610c68610b0e565b029392505050565b6000610a818383610bb156fea2646970667358221220e29a05f5a0c7c3208316e5b8979e94e209cd2615145fb7f13708de7ea1ed50ab64736f6c63430008110033496e697469616c697a61626c653a20636f6e7472616374206973206e6f742069";

type TestErc20ConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TestErc20ConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TestErc20__factory extends ContractFactory {
  constructor(...args: TestErc20ConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<TestErc20> {
    return super.deploy(overrides || {}) as Promise<TestErc20>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): TestErc20 {
    return super.attach(address) as TestErc20;
  }
  override connect(signer: Signer): TestErc20__factory {
    return super.connect(signer) as TestErc20__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TestErc20Interface {
    return new utils.Interface(_abi) as TestErc20Interface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TestErc20 {
    return new Contract(address, _abi, signerOrProvider) as TestErc20;
  }
}
