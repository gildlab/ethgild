/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../../common";

export type ChainlinkFeedPriceOracleConfigStruct = {
  feed: PromiseOrValue<string>;
  staleAfter: PromiseOrValue<BigNumberish>;
};

export type ChainlinkFeedPriceOracleConfigStructOutput = [string, BigNumber] & {
  feed: string;
  staleAfter: BigNumber;
};

export interface ChainlinkFeedPriceOracleInterface extends utils.Interface {
  functions: {
    "feed()": FunctionFragment;
    "price()": FunctionFragment;
    "staleAfter()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic: "feed" | "price" | "staleAfter"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "feed", values?: undefined): string;
  encodeFunctionData(functionFragment: "price", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "staleAfter",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "feed", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "price", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "staleAfter", data: BytesLike): Result;

  events: {
    "Construction(address,tuple)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Construction"): EventFragment;
}

export interface ConstructionEventObject {
  sender: string;
  config: ChainlinkFeedPriceOracleConfigStructOutput;
}
export type ConstructionEvent = TypedEvent<
  [string, ChainlinkFeedPriceOracleConfigStructOutput],
  ConstructionEventObject
>;

export type ConstructionEventFilter = TypedEventFilter<ConstructionEvent>;

export interface ChainlinkFeedPriceOracle extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ChainlinkFeedPriceOracleInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    feed(overrides?: CallOverrides): Promise<[string]>;

    price(overrides?: CallOverrides): Promise<[BigNumber]>;

    staleAfter(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  feed(overrides?: CallOverrides): Promise<string>;

  price(overrides?: CallOverrides): Promise<BigNumber>;

  staleAfter(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    feed(overrides?: CallOverrides): Promise<string>;

    price(overrides?: CallOverrides): Promise<BigNumber>;

    staleAfter(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    "Construction(address,tuple)"(
      sender?: null,
      config?: null
    ): ConstructionEventFilter;
    Construction(sender?: null, config?: null): ConstructionEventFilter;
  };

  estimateGas: {
    feed(overrides?: CallOverrides): Promise<BigNumber>;

    price(overrides?: CallOverrides): Promise<BigNumber>;

    staleAfter(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    feed(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    price(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    staleAfter(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
