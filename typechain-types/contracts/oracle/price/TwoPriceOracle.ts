/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export type TwoPriceOracleConfigStruct = {
  base: PromiseOrValue<string>;
  quote: PromiseOrValue<string>;
};

export type TwoPriceOracleConfigStructOutput = [string, string] & {
  base: string;
  quote: string;
};

export interface TwoPriceOracleInterface extends utils.Interface {
  functions: {
    "base()": FunctionFragment;
    "price()": FunctionFragment;
    "quote()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic: "base" | "price" | "quote"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "base", values?: undefined): string;
  encodeFunctionData(functionFragment: "price", values?: undefined): string;
  encodeFunctionData(functionFragment: "quote", values?: undefined): string;

  decodeFunctionResult(functionFragment: "base", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "price", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "quote", data: BytesLike): Result;

  events: {
    "Construction(address,tuple)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Construction"): EventFragment;
}

export interface ConstructionEventObject {
  sender: string;
  config: TwoPriceOracleConfigStructOutput;
}
export type ConstructionEvent = TypedEvent<
  [string, TwoPriceOracleConfigStructOutput],
  ConstructionEventObject
>;

export type ConstructionEventFilter = TypedEventFilter<ConstructionEvent>;

export interface TwoPriceOracle extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: TwoPriceOracleInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    base(overrides?: CallOverrides): Promise<[string]>;

    price(overrides?: CallOverrides): Promise<[BigNumber]>;

    quote(overrides?: CallOverrides): Promise<[string]>;
  };

  base(overrides?: CallOverrides): Promise<string>;

  price(overrides?: CallOverrides): Promise<BigNumber>;

  quote(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    base(overrides?: CallOverrides): Promise<string>;

    price(overrides?: CallOverrides): Promise<BigNumber>;

    quote(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "Construction(address,tuple)"(
      sender?: null,
      config?: null
    ): ConstructionEventFilter;
    Construction(sender?: null, config?: null): ConstructionEventFilter;
  };

  estimateGas: {
    base(overrides?: CallOverrides): Promise<BigNumber>;

    price(overrides?: CallOverrides): Promise<BigNumber>;

    quote(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    base(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    price(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    quote(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
